""" Sample TensorFlow XML-to-TFRecord converter
provided by https://tensorflow-object-detection-api-tutorial.readthedocs.io/en/latest/training.html#convert-xml-to-record

usage: generate_tfrecord.py [-h] [-x XML_DIR] [-l LABELS_PATH] [-o OUTPUT_PATH] [-i IMAGE_DIR] [-c CSV_PATH]

Example:python generate_tf_record_aux.py -x /home/object/caterina/tf_OD_API/models/research/object_detection/data/peixos_imedea/test -l /home/object/caterina/tf_OD_API/models/research/object_detection/data/peixos_imedea/label_map.pbtx -o /home/object/caterina/tf_OD_API/models/research/object_detection/data/peixos_imedea -c /home/object/caterina/tf_OD_API/models/research/object_detection/data/peixos_imedea/test

python generate_tf_record_aux.py -x /home/object/caterina/tf_OD_API/models/research/object_detection/data/peixos_imedea/test -l /home/object/caterina/tf_OD_API/models/research/object_detection/data/peixos_imedea/label_map.pbtx -o /home/object/caterina/tf_OD_API/models/research/object_detection/data/peixos_imedea/test.record -c /home/object/caterina/tf_OD_API/models/research/object_detection/data/peixos_imedea/test/test_labels.csv


optional arguments:
  -h, --help            show this help message and exit
  -x XML_DIR, --xml_dir XML_DIR
                        Path to the folder where the input .xml files are stored.
  -l LABELS_PATH, --labels_path LABELS_PATH
                        Path to the labels (.pbtxt) file.
  -o OUTPUT_PATH, --output_path OUTPUT_PATH
                        Path of output TFRecord (.record) file.
  -i IMAGE_DIR, --image_dir IMAGE_DIR
                        Path to the folder where the input image files are stored. Defaults to the same directory as XML_DIR.
  -c CSV_PATH, --csv_path CSV_PATH
                        Path of output .csv file. If none provided, then no file will be written.
"""

import os
import glob
import pandas as pd
import io
import xml.etree.ElementTree as ET
import argparse

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'    # Suppress TensorFlow logging (1)
import tensorflow.compat.v1 as tf
from PIL import Image
from object_detection.utils import dataset_util, label_map_util
from collections import namedtuple

# Initiate argument parser
parser = argparse.ArgumentParser(
    description="Sample TensorFlow XML-to-TFRecord converter")
# parser.add_argument("-x",
#                     "--xml_dir",
#                     help="Path to the folder where the input .xml files are stored.",
#                     type=str)
# parser.add_argument("-l",
#                     "--labels_path",
#                     help="Path to the labels (.pbtxt) file folder.", type=str)
parser.add_argument("-o",
                    "--output_path",
                    help="Path of output TFRecord (.record) folder. Default input path"
                    , type=str)
parser.add_argument("-i",
                    "--input_dir",
                    help="Path to the folder where the input image files are stored"
                         "pathto/images where train and test folders containing images can be found"
                         "label_map.pbtx should be found here",
                    type=str, default=None)
parser.add_argument("-c",
                    "--csv_save",
                    help="Wheather to save a .csv file. If none provided, then no file will be "
                         "written.",
                    type=bool, default=False)

args = parser.parse_args()

# if args.image_dir is None:
#     args.image_dir = args.xml_dir

if args.output_path is None:
    args.output_path=args.input_dir


#TO DO: solve this issues to automate label_map reading:
# label_map = label_map_util.load_labelmap(args.labels_path)
# label_map_dict = label_map_util.get_label_map_dict(label_map)

labels={1: 'Afish poly', 2: 'Chromis chromis', 3: 'Diplodus annularis', 4: 'Coris julis', 5: 'Mugilidae prob Chelon', 6: 'Serranus scriba', 7: 'Oblada melanura', 8: 'Diplodus vulgaris', 9: 'Diplodus sp.', 10: 'Diplodus sargus', 11: 'Pomatous salator', 12: 'Symphodus sp.', 13: 'Mullus sp.', 14: 'Epinephelus marginatus', 15: 'serranid unid.', 16: 'Epinephelus sp.', 17: 'labrid unid.'}
label_map_dict={k:v for v,k in labels.items()}

print(label_map_dict, "\n")

def xml_to_csv(path):
    """Iterates through all .xml files (generated by labelImg) in a given directory and combines
    them in a single Pandas dataframe.

    Parameters:
    ----------
    path : str
        The path containing the .xml files
    Returns
    -------
    Pandas DataFrame
        The produced dataframe
    """

    xml_list = []
    for xml_file in glob.glob(path + '/*.xml'):
        tree = ET.parse(xml_file)
        root = tree.getroot()
        filename = root.find('filename').text.split(".")[0]+".jpg"
        width = int(root.find('size').find('width').text)
        height = int(root.find('size').find('height').text)
        for member in root.findall('object'):
            #check
            if member[0].text not in label_map_dict.keys():
                print("salgo con: " + str(member[0].text))
                
            bndbox = member.find('bndbox')
            value = (filename,
                     width,
                     height,
                     member.find('name').text,
                     int(bndbox.find('xmin').text),
                     int(bndbox.find('ymin').text),
                     int(bndbox.find('xmax').text),
                     int(bndbox.find('ymax').text),
                     )
            xml_list.append(value)
    column_name = ['filename', 'width', 'height',
                   'class', 'xmin', 'ymin', 'xmax', 'ymax']
    xml_df = pd.DataFrame(xml_list, columns=column_name)
    print("CHECK: --------------------------------------------------------------------------")
    print("Created dataframe: ",xml_df.head())
    print("---------------------------------------------------------------------------------------------")
    return xml_df


def class_text_to_int(row_label):
    return label_map_dict[row_label]


def split(df, group):
    data = namedtuple('data', ['filename', 'object'])
    gb = df.groupby(group)
    return [data(filename, gb.get_group(x)) for filename, x in zip(gb.groups.keys(), gb.groups)]


def create_tf_example(group, path):
    with tf.gfile.GFile(os.path.join(path, '{}'.format(group.filename)), 'rb') as fid:
        encoded_jpg = fid.read()
    encoded_jpg_io = io.BytesIO(encoded_jpg)
    image = Image.open(encoded_jpg_io)
    width, height = image.size

    #alternativa
    # width = int(str.split(str(group[1].width))[1])
    # height = int(str.split(str(group[1].height))[1])


    filename = group.filename.encode('utf8')
    image_format = b'jpg'
    xmins = []
    xmaxs = []
    ymins = []
    ymaxs = []
    classes_text = []
    classes = []

    for index, row in group.object.iterrows():
        xmins.append(row['xmin'] / width)
        xmaxs.append(row['xmax'] / width)
        ymins.append(row['ymin'] / height)
        ymaxs.append(row['ymax'] / height)
        classes_text.append(row['class'].encode('utf8'))
        classes.append(class_text_to_int(row['class']))

    tf_example = tf.train.Example(features=tf.train.Features(feature={
        'image/height': dataset_util.int64_feature(height),
        'image/width': dataset_util.int64_feature(width),
        'image/filename': dataset_util.bytes_feature(filename),
        'image/source_id': dataset_util.bytes_feature(filename),
        'image/encoded': dataset_util.bytes_feature(encoded_jpg),
        'image/format': dataset_util.bytes_feature(image_format),
        'image/object/bbox/xmin': dataset_util.float_list_feature(xmins),
        'image/object/bbox/xmax': dataset_util.float_list_feature(xmaxs),
        'image/object/bbox/ymin': dataset_util.float_list_feature(ymins),
        'image/object/bbox/ymax': dataset_util.float_list_feature(ymaxs),
        'image/object/class/text': dataset_util.bytes_list_feature(classes_text),
        'image/object/class/label': dataset_util.int64_list_feature(classes),
    }))
    return tf_example


def main(_):
    sets=["train","test"]
    for set in sets:
        output_path= args.output_path +"/"+ set +".record"
        writer = tf.python_io.TFRecordWriter(output_path)
        path = os.path.join(args.input_dir,set)
        examples = xml_to_csv(path)
        #dividir per fitxer
        grouped = split(examples, 'filename')
        for group in grouped:
            tf_example = create_tf_example(group, path)
            writer.write(tf_example.SerializeToString())
        writer.close()
        print('Successfully created the TFRecord file: {}'.format(output_path))

        if args.csv_save is True:
            path = args.input_dir+"/"+set+"_record.csv"
            examples.to_csv(path, index=None)
            print('Successfully created the CSV file: {}'.format(path))


if __name__ == '__main__':
    tf.app.run()